const t=`{% block rl_user_otp_user_card %} <mt-card :title="$tc('rl-2fa.settings.user-detail.title')" :is-loading="isLoading || isLoading2Fa"> <div v-if="user && user.customFields && user.customFields.rl_2fa_secret"> <sw-alert variant="success" :title="$tc('rl-2fa.settings.user-detail.enabled.title')" style="margin-bottom: 0;" :showIcon="true" :closable="false"> {{ $tc('rl-2fa.settings.user-detail.enabled.description') }} <mt-button @click="disable2FA">{{ $tc('rl-2fa.settings.user-detail.enabled.disable') }}</mt-button> </sw-alert> </div> <div v-else-if="!generatedSecretUrl"> <sw-alert variant="warning" :title="$tc('rl-2fa.settings.user-detail.not-enabled.title')" style="margin-bottom: 0;" :showIcon="true" :closable="false"> {{ $tc('rl-2fa.settings.user-detail.not-enabled.description') }} <sw-button @click="generateSecret">{{ $tc('rl-2fa.settings.user-detail.not-enabled.get-started') }}</sw-button> </sw-alert> </div> <div v-else-if="generatedSecretUrl"> <sw-container columns="1fr 1fr"> <div class="rl-2fa-qr-code"> <img :src="generatedSecretUrl" /> <span class="rl-2fa-qr-code--secret">{{ generatedSecret }}</span> </div> <div> <b>{{ $tc('rl-2fa.settings.user-detail.generating.scan-code') }}</b><br /> <br /> {{ $tc('rl-2fa.settings.user-detail.generating.description') }}<br /> <br /> <sw-alert variant="error" :title="$tc('rl-2fa.settings.user-detail.generating.error-title')" :showIcon="true" v-if="oneTimePasswordError.length > 0"> {{ oneTimePasswordError }} </sw-alert> <mt-text-field label="One-time Password" :isInvalid="oneTimePasswordError.length > 0" v-model:value="oneTimePassword" autocomplete="one-time-code"/> <mt-button @click="validateAndSaveOneTimePassword"> {{ $tc('rl-2fa.settings.user-detail.generating.validate-save') }} </mt-button> </div> </sw-container> </div> </mt-card> {% endblock %}`,s={template:t,inject:["rl2faService"],props:{user:{type:Object,required:!0},isLoading:{type:Boolean,required:!0},onSave:{type:Function,required:!0}},data(){return{httpClient:null,isLoading2Fa:!1,generatedSecret:null,generatedSecretUrl:null,oneTimePassword:"",oneTimePasswordError:""}},created(){this.syncService=Shopware.Service("syncService"),this.httpClient=this.syncService.httpClient},methods:{generateSecret(){this.isLoading2Fa=!0,this.rl2faService.getSecret(this.user.username).then(e=>{this.isLoading2Fa=!1,this.generatedSecret=e.secret,this.generatedSecretUrl=e.qrUrl})},validateAndSaveOneTimePassword(){this.isLoading2Fa=!0,this.rl2faService.validateSecret(this.generatedSecret,this.oneTimePassword).then(e=>{this.isLoading2Fa=!1,e.status==="OK"&&this.saveOneTimePassword()}).catch(e=>{this.isLoading2Fa=!1,this.oneTimePasswordError=e.response.data.error})},saveOneTimePassword(){this.user.customFields||this.$set(this.user,"customFields",{}),this.user.customFields.rl_2fa_secret=this.generatedSecret,this.onSave()},disable2FA(){this.user.customFields||this.$set(this.user,"customFields",{}),this.user.customFields.rl_2fa_secret="",this.onSave()}}};export{s as default};
//# sourceMappingURL=index-iHvrXf4n.js.map
